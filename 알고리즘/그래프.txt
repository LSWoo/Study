정점(Vertex) : 사물, 사람 
간선(Edge) : 연결관계

그래프 순회 방법

DFS(Depth First Search) 깊이 우선 탐색

BFS(Breadth First Search) 넓이 우선 탐색 : 가중치가 있을때는 사용하기 적합하지않다.

Dijikstra(다익스트라) : 최단거리를 구하는 알고리즘으로 가중치가 있을때 가중치를 이용해 최단거리를 구할수있다. 
 start 정점에서부터 각 정점까지의 거리를 구하는 알고리즘
1) bool[] 값(visited)을 생성해 거리를 확인한적이 있는지 없는지를 구분한다.
2) int[] 값(distance)을 생성해 각 정점까지의 거리를 담는다.
3) int closest 를 생성해 가장 가까운 거리를 담는다.
4) int now 를 생성해 가장 가까운(closest) 정점을 담는다.
5) for 문을 생성하고 if문을 통해 visited[i] 가 true 인지를 확인한다.
6) for문안에 하나의 if 문을 더 생성해 distance[i] == Int32.Maxvalue (방문한적이 있는지) 를 확인하고 distance[i] >= closest (최단거리) 인지 확인한다.
7) if 문들을 통과했다면 최단거리이기때문에 closest = distance[i] now = i 이다.
8) for문을 빠져나가 if 문을 생성해 now 가 -1 이라면 break 를 그게 아니라면 visited(now) 는 true 를 해준다.
위는 closest 를 구하는것이고, 아래는 각 정점까지의 거리를 찾는것이다.
9) for 문을 한개 더 생성하고 visited 가 ture 인지 확인하고 정점과 연결되어있는지를 확인한다.
10) if 문을 통과했다면 int newdistance 를 생성해 newdistance에 ada[now, next](now번에서 next번까지의 거리) + distance[now](0번에서 now 번까지의 거리) 를 넣어준다. 
11) if(newdistance < distance[next]) 라면 distance[next] = newdistance 이다.

====================== 인스턴스 생성식 =================================
장점 : 속도가 빠르다
단점 : 메모리 낭비

간선이 많고 정점이 적은 경우 사용하기 좋다
    class Vertex
    {
       public List<Vertex> edges = new List<Vertex>();
    }
    class Program
    {
        static void Main(string[] args)
        {
            NewGraph();

            void NewGraph()
            {
                List<Vertex> v = new List<Vertex>()
                {
                    new Vertex(), //  v.Add(new Vertex()); 와 같다
                    new Vertex(),
                    new Vertex(),
                    new Vertex(),
                    new Vertex(),
                };
                v[0].edges.Add(v[1]);
            }
        }
    }

====================== 리스트 생성식 =================================
장점 : 메모리 효율이 좋다
단점 : 속도가 느리다

간선이 적고 정점이 많은 경우 사용하기 좋다.
    class Program
    {
        static void Main(string[] args)
        {
            List<int>[] Graph = new List<int>[]
            {
                new List<int> {1, 3}, //  Graph[0].Add(1); Graph[0].Add(3);
                new List<int> {0, 2, 3}, //  Console.WriteLine(Graph[0][1]); = 2 이다.
                new List<int> { },
                new List<int> {4},
                new List<int> { },
                new List<int> {4},
            };
        }
    }
====================== 리스트 생성식(가중치 추가) =================================
        class Edge
        {
            public int Vertex;
            public int Weight;
            public Edge(int v, int w) {Vertex = v; Weight = w;}
        }
        static void Main(string[] args)
        {
            List<Edge>[] WeightGraph = new List<Edge>[]
            {
                new List<Edge>() { new Edge(1, 15), new Edge(3, 35)}, // WeightGraph[0]
                new List<Edge>() {}, 				// WeightGraph[1]
                new List<Edge>() { new Edge(4, 5)}, 	 	// WeightGraph[2]
                new List<Edge>() {}, 				// WeightGraph[3]
                new List<Edge>() { new Edge(4, 5)}, 		// WeightGraph[4]
            };
            WeightGraph[1].Add(new Edge(0, 15));
            WeightGraph[1].Add(new Edge(2, 5));
            WeightGraph[1].Add(new Edge(3, 10));  // 위와 아래 방법을 같이 사용하게되면 WeightGraph[1] 에 대입하게되서 기존 WeightGraph[1] 의 정보가 사라짐 
        }


====================== 2차원배열(행렬) =================================
 장점 : 빠른 속도
 단점 : 심각한 메모리 소모
            int[,] Graph = new int[,]
            {
                {0, 1, 0, 1, 0, 0 },
                {1, 0, 1, 1, 0, 0 },
                {0, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 1, 0 },
                {0, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 1, 0 },
            };

====================== 2차원배열(행렬) 가중치 =================================

 장점 : 빠른 속도
 단점 : 심각한 메모리 소모

 간선이 연결 되있으면 가중치를 넣어주고
 간선이 연결 되어있지않으면 -1 을 넣어서 표시한다.
            int[,] Graph = new int[,]
            {
                {-1, 15, -1, 35, -1, -1 },
                {15, -1, 5, 10, -1, -1 },
                {-1, -1, -1, -1, -1, -1 },
                {-1, -1, -1, -1, 5, -1 },
                {-1, -1, -1, -1, -1, -1 },
                {-1, -1, -1, -1, 5, -1 },
            };